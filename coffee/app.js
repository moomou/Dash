// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var API_Backend, CURRENT_OFFSET, WEEK_NUM, checkboxUpdate, getLatency, saveDayProgress, visualize;



  API_Backend = null;

  WEEK_NUM = moment().format('YYYYww');

  CURRENT_OFFSET = 0;


  /*
  # A simple function to calculate network latency
  */

  getLatency = function() {
    var img, server;
    server = {
      imgUrl: "http://google.com"
    };
    img = document.createElement('IMG');
    server.startTime = (new Date()).getTime();
    img.onload = function() {
      server.endTime = (new Date()).getTime();
      console.log(server.endTime - server.startTime);
      return $('.network').html(server.endTime - server.startTime);
    };
    return img.src = server.imgUrl;
  };


  /*
  # Retrieve all objects in the data store
  # and store that as a json blob suitable
  # for visualization with d3
  */

  saveDayProgress = function() {
    var entry, filename, k, other, output, tag, time, v, _ref, _ref1;
    output = {};
    _ref = window.localStorage;
    for (k in _ref) {
      v = _ref[k];
      if (k === 'todos-backbone') {
        continue;
      }
      entry = JSON.parse(v);
      if (!entry.completed) {
        continue;
      }
      _ref1 = entry.title.split(' '), time = _ref1[0], tag = _ref1[1], other = _ref1[2];
      if (!tag) {
        continue;
      }
      if (!output[tag]) {
        console.log("creating " + tag);
        output[tag] = entry.effort || 1;
      } else {
        output[tag] += entry.effort || 1;
      }
    }
    filename = moment().format('YYYYwwd');
    console.log("Uploading " + filename);
    return window.localStorage.setItem(filename, JSON.stringify(output));
  };


  /*
  # Update checkboxes
  */

  checkboxUpdate = function(weekKey) {
    return localforage.getItem(weekKey).then(function(value) {
      var ck, cks, ind, _i, _len, _results;
      if (!value) {
        $('.ck').prop('checked', false);
      }
      cks = $('.ck');
      _results = [];
      for (ind = _i = 0, _len = cks.length; _i < _len; ind = ++_i) {
        ck = cks[ind];
        if (value[ind]) {
          _results.push(ck.checked = true);
        } else {
          _results.push(ck.checked = false);
        }
      }
      return _results;
    });
  };


  /*
  # Generate the visualization
  */

  visualize = function(offset) {
    var dayData, num, weekData, weekKey, weekOffset, _i;
    weekOffset = moment().day(offset);
    weekKey = weekOffset.format("YYYYww");
    weekData = [];
    $('#viz-week').html(weekOffset.format("YYYY-ww"));
    for (num = _i = 0; _i <= 6; num = ++_i) {
      dayData = window.localStorage.getItem(weekKey + num);
      weekData[num] = JSON.parse(dayData);
    }
    checkboxUpdate(weekKey);
    return window.PlotPunchCard(null, weekData);
  };

  $('.js-save').click(saveDayProgress);

  $('.js-viz-backward').click(function(e) {
    CURRENT_OFFSET -= 7;
    return visualize(CURRENT_OFFSET);
  });

  $('.js-viz-forward').click(function(e) {
    CURRENT_OFFSET += 7;
    return visualize(CURRENT_OFFSET);
  });

  $('.ck').change(function(e) {
    var index;
    index = $(e.target).parent().index();
    return localforage.getItem(WEEK_NUM).then(function(value) {
      var checked;
      if (!value) {
        checked = {};
        checked[index] = $(e.target).prop('checked');
        return localforage.setItem(WEEK_NUM, checked);
      } else {
        value[index] = $(e.target).prop('checked');
        return localforage.setItem(WEEK_NUM, value);
      }
    });
  });

  new Draggabilly(document.getElementById('todoapp'));

  visualize(CURRENT_OFFSET);

  $('#datetime').html(moment().format("ddd, MMM Do YYYY"));

}).call(this);
